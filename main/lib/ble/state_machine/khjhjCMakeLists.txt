if(ESP_PLATFORM)
	#idf_component_register(SRCS
	#					   "lib/state_machine.cpp"
 #                      	   INCLUDE_DIRS "include"
						   #REQUIRES
	#)
else()
	cmake_minimum_required(VERSION 3.13)
	project(BLE_state_machine C CXX ASM)
	set(CMAKE_C_STANDARD 11)
	set(CMAKE_CXX_STANDARD 23)
	set(CMAKE_BUILD_TYPE Debug)

	if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		add_compile_options(-Wall -Wextra -Wpedantic)
	endif()

	set(BLE_STATE_MACHINE_SRCS
		lib/state_machine.cpp
		lib/sender.cpp
	)

	set(BOOST_SML_DIR ${CMAKE_CURRENT_LIST_DIR}/lib/sml_wrapper/sml)

	add_subdirectory(${BOOST_SML_DIR})

	set(BLE_STATE_MACHINE_LINK_LIBS
		sml
	)

	option(BLE_STATE_MACHINE_TEST "Enable BLE::StateMahcine Tests" OFF)
	if(BLE_STATE_MACHINE_TEST)
		list(APPEND BLE_STATE_MACHINE_SRCS "lib/tests.cpp")
		set(TEST_SRCS 
			lib/tests.cpp
		)

		function(add_test_case TEST_NAME TEST_SOURCE)
			add_executable(${TEST_NAME} ${TEST_SRCS} tests/${TEST_SOURCE})
			target_include_directories(${TEST_NAME} PRIVATE
				${CMAKE_CURRENT_LIST_DIR}/include
				${BLE_STATE_MACHINE_INCLUDE_DIRS}
			)
			target_link_libraries(${TEST_NAME} PRIVATE
				${BLE_STATE_MACHINE_LINK_LIBS}
			)
			add_test(NAME BLE::StateMachine::Tests::${TEST_NAME}
					COMMAND ${TEST_NAME})
		endfunction()

		enable_testing()
		add_test_case(run run.cpp)
	endif()

	add_library(BLE_state_machine STATIC
		${BLE_STATE_MACHINE_SRCS}
	)

	target_include_directories(BLE_state_machine PUBLIC
		${CMAKE_CURRENT_LIST_DIR}/include
	)

	target_link_libraries(BLE_state_machine PRIVATE
		${BLE_STATE_MACHINE_LINK_LIBS}
	)
endif()
